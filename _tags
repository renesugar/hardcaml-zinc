# OASIS_START
# DO NOT EDIT (digest: 072f3adde805e1cfbdf4fceeebf45754)
# Ignore VCS directories, you can use the same kind of rule outside
# OASIS_START/STOP if you want to exclude directories that contains
# useless stuff for the build process
true: annot, bin_annot
<**/.svn>: -traverse
<**/.svn>: not_hygienic
".bzr": -traverse
".bzr": not_hygienic
".hg": -traverse
".hg": not_hygienic
".git": -traverse
".git": not_hygienic
"_darcs": -traverse
"_darcs": not_hygienic
# Library HardCamlZinc
"src/HardCamlZinc.cmxs": use_HardCamlZinc
"src/arbiter.cmx": for-pack(HardCamlZinc)
"src/ops.cmx": for-pack(HardCamlZinc)
"src/mlvalues.cmx": for-pack(HardCamlZinc)
"src/machine.cmx": for-pack(HardCamlZinc)
"src/repr.cmx": for-pack(HardCamlZinc)
"src/trace.cmx": for-pack(HardCamlZinc)
"src/instr.cmx": for-pack(HardCamlZinc)
"src/interp.cmx": for-pack(HardCamlZinc)
"src/load.cmx": for-pack(HardCamlZinc)
"src/state.cmx": for-pack(HardCamlZinc)
"src/zinc.cmx": for-pack(HardCamlZinc)
"src/c_runtime.cmx": for-pack(HardCamlZinc)
"src/framework.cmx": for-pack(HardCamlZinc)
<src/*.ml{,i,y}>: pkg_bigarray
<src/*.ml{,i,y}>: pkg_compiler-libs.bytecomp
<src/*.ml{,i,y}>: pkg_deriving.syntax
<src/*.ml{,i,y}>: pkg_hardcaml
<src/*.ml{,i,y}>: pkg_hardcaml-examples
<src/*.ml{,i,y}>: pkg_hardcaml-llvmsim
<src/*.ml{,i,y}>: pkg_hardcaml-waveterm.lterm
<src/*.ml{,i,y}>: pkg_hardcaml.syntax
<src/*.ml{,i,y}>: pkg_unix
# Executable simple
# Executable hardcamlrun
<test/hardcamlrun.{native,byte}>: pkg_bigarray
<test/hardcamlrun.{native,byte}>: pkg_compiler-libs.bytecomp
<test/hardcamlrun.{native,byte}>: pkg_deriving.runtime
<test/hardcamlrun.{native,byte}>: pkg_deriving.syntax
<test/hardcamlrun.{native,byte}>: pkg_hardcaml
<test/hardcamlrun.{native,byte}>: pkg_hardcaml-examples
<test/hardcamlrun.{native,byte}>: pkg_hardcaml-llvmsim
<test/hardcamlrun.{native,byte}>: pkg_hardcaml-waveterm.lterm
<test/hardcamlrun.{native,byte}>: pkg_hardcaml.syntax
<test/hardcamlrun.{native,byte}>: pkg_unix
<test/hardcamlrun.{native,byte}>: use_HardCamlZinc
# Executable codes
<test/codes.{native,byte}>: pkg_bigarray
<test/codes.{native,byte}>: pkg_compiler-libs.bytecomp
<test/codes.{native,byte}>: pkg_deriving.runtime
<test/codes.{native,byte}>: pkg_deriving.syntax
<test/codes.{native,byte}>: pkg_hardcaml
<test/codes.{native,byte}>: pkg_hardcaml-examples
<test/codes.{native,byte}>: pkg_hardcaml-llvmsim
<test/codes.{native,byte}>: pkg_hardcaml-waveterm.lterm
<test/codes.{native,byte}>: pkg_hardcaml.syntax
<test/codes.{native,byte}>: pkg_unix
<test/codes.{native,byte}>: use_HardCamlZinc
# Executable monadinterp
<test/monadinterp.{native,byte}>: pkg_bigarray
<test/monadinterp.{native,byte}>: pkg_compiler-libs.bytecomp
<test/monadinterp.{native,byte}>: pkg_deriving.runtime
<test/monadinterp.{native,byte}>: pkg_deriving.syntax
<test/monadinterp.{native,byte}>: pkg_hardcaml
<test/monadinterp.{native,byte}>: pkg_hardcaml-examples
<test/monadinterp.{native,byte}>: pkg_hardcaml-llvmsim
<test/monadinterp.{native,byte}>: pkg_hardcaml-waveterm.lterm
<test/monadinterp.{native,byte}>: pkg_hardcaml.syntax
<test/monadinterp.{native,byte}>: pkg_unix
<test/monadinterp.{native,byte}>: use_HardCamlZinc
<test/*.ml{,i,y}>: pkg_bigarray
<test/*.ml{,i,y}>: pkg_compiler-libs.bytecomp
<test/*.ml{,i,y}>: pkg_deriving.runtime
<test/*.ml{,i,y}>: pkg_deriving.syntax
<test/*.ml{,i,y}>: pkg_hardcaml
<test/*.ml{,i,y}>: pkg_hardcaml-examples
<test/*.ml{,i,y}>: pkg_hardcaml-llvmsim
<test/*.ml{,i,y}>: pkg_hardcaml-waveterm.lterm
<test/*.ml{,i,y}>: pkg_hardcaml.syntax
<test/*.ml{,i,y}>: pkg_unix
<test/*.ml{,i,y}>: use_HardCamlZinc
# OASIS_STOP
